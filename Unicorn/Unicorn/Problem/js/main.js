// scripts.js

document.addEventListener('DOMContentLoaded', () => {
  const problemInput = document.getElementById('problem-input');
  const generateBtn = document.getElementById('generate-btn') || document.getElementById('submit-btn');
  const solutionContent = document.getElementById('solution-output') || document.getElementById('solution-content');
  const solutionPlaceholder = document.querySelector('.solution-placeholder');

  // Show animated loading dots
  function showProcessingAnimation() {
    if (solutionPlaceholder) {
      solutionPlaceholder.innerHTML = `
        <div class="processing-animation">
          <div class="dot"></div>
          <div class="dot"></div>
          <div class="dot"></div>
        </div>
      `;
      solutionPlaceholder.style.display = 'flex';
    }
    if (solutionContent) {
      solutionContent.classList.add('hidden');
    }
  }

  // Hide loading animation and reveal solution
  function hideProcessingAnimation() {
    if (solutionPlaceholder) {
      solutionPlaceholder.style.display = 'none';
    }
    if (solutionContent) {
      solutionContent.classList.remove('hidden');
    }
  }

  // Fallback mock response generator
  function generateMockResponse(inputText) {
    const exampleIdea = inputText || "a platform for remote team collaboration";
    return `
      <strong>Solution (Offline Mock):</strong>
      <div>
        <p><em>Refined Idea:</em> ${exampleIdea} can be transformed into a scalable SaaS tool offering real-time chat, video conferencing, and task management for distributed teams.</p>
        <p><em>Roadmap:</em></p>
        <ol>
          <li>Conduct user research with remote teams</li>
          <li>Design core collaboration features</li>
          <li>Build MVP with basic communication tools</li>
          <li>Launch closed beta and gather feedback</li>
          <li>Iterate, enhance UX, and expand feature set</li>
        </ol>
        <p style="color:gray;"><small>This response was generated BY Unicorn.</small></p>
      </div>
    `;
  }

  // Fetch solution using Gemini API
  async function generateSolution() {
    const inputText = problemInput.value.trim();

    if (!inputText) {
      alert('Please describe your business problem first!');
      return;
    }

    showProcessingAnimation();

    try {
      const response = await fetch(
        'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=AIzaSyABlN7ZLHElyj9lcaJmqaovvKrhgfK8Fv8',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [{ text: inputText }]
              }
            ]
          })
        }
      );

      if (!response.ok) throw new Error('Failed to fetch from Gemini API');

      const data = await response.json();

      // Extract Gemini's response text
      const reply = data.candidates?.[0]?.content?.parts?.[0]?.text || "No solution found.";

      // Display result in UI
      solutionContent.innerHTML = `<strong>Solution:</strong><div>${reply}</div>`;

    } catch (error) {
      console.error('Error:', error);
      const mockReply = generateMockResponse(inputText);
      solutionContent.innerHTML = mockReply;
    } finally {
      hideProcessingAnimation();

      // Auto-scroll to solution for mobile
      if (window.innerWidth < 1025) {
        document.querySelector('.response-section')?.scrollIntoView({
          behavior: 'smooth'
        });
      }
    }
  }

  // Attach event listeners
  generateBtn?.addEventListener('click', generateSolution);

  problemInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && e.ctrlKey) {
      e.preventDefault();
      generateSolution();
    }
  });

  problemInput?.addEventListener('focus', () => {
    document.querySelector('.input-section')?.classList.add('focused');
  });

  problemInput?.addEventListener('blur', () => {
    document.querySelector('.input-section')?.classList.remove('focused');
  });
});
